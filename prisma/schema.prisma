// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Chocolate {
    id             Int    @id @default(autoincrement())
    name           String
    brand          String
    price          Int
    recommendation Int
    country        String
    flavor         String
    type           String
    description    String @db.Text
    image          String
    url            String
    like           Like[]
}

model Account {
    id                 String    @id @default(cuid())
    userId             String
    providerType       String
    providerId         String
    providerAccountId  String
    refreshToken       String?
    accessToken        String?
    accessTokenExpires DateTime?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    user               User      @relation(fields: [userId], references: [id])

    @@unique([providerId, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    userId       String
    expires      DateTime
    sessionToken String   @unique
    accessToken  String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])
}

model User {
    id            String    @id @default(cuid())
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    name          String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    likes         Like[]
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

model Like {
    id          Int       @id @default(autoincrement())
    chocolateId Int
    userId      String
    createdAt   DateTime  @default(now())
    chocolate   Chocolate @relation(fields: [chocolateId], references: [id], onDelete: Cascade)
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
